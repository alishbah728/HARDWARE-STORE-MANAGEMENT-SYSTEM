#-*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from PyQt5.QtWidgets import QMessageBox
import datetime
from reportlab.pdfgen import canvas
import webbrowser
global B
B=0
global d
d=94
class Ui_mart(object):
    def setupUi(self, mart):
        mart.setObjectName("mart")
        mart.setWindowModality(QtCore.Qt.ApplicationModal)
        mart.resize(662, 594)
        mart.setFixedSize(662, 594)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/newPrefix/XMART-01.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        mart.setWindowIcon(icon)
        self.stackedWidget = QtWidgets.QStackedWidget(mart)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 661, 591))
        self.stackedWidget.setStyleSheet("color: rgb(0, 0, 0);")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.frame = QtWidgets.QFrame(self.page)
        self.frame.setGeometry(QtCore.QRect(190, 180, 281, 191))
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-color: rgb(0, 0, 0);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.user1 = QtWidgets.QLineEdit(self.frame)
        self.user1.setGeometry(QtCore.QRect(80, 40, 121, 31))
        self.user1.setStyleSheet("color: rgb(0, 0, 0);")
        self.user1.setObjectName("user1")
        self.pass1 = QtWidgets.QLineEdit(self.frame)
        self.pass1.setGeometry(QtCore.QRect(80, 120, 121, 31))
        self.pass1.setStyleSheet("color: rgb(0, 0, 0);")
        self.pass1.setEchoMode(QtWidgets.QLineEdit.Password)
        self.pass1.setObjectName("pass1")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(110, 160, 75, 23))
        self.pushButton.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 14pt \"Times New Roman\";\n"
"background-color: rgb(255, 0, 0);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(210, 170, 61, 20))
        self.pushButton_2.setStyleSheet("color: rgb(255, 0, 0);")
        self.pushButton_2.setFlat(True)
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(250, 50, 171, 81))
        self.label.setStyleSheet("color: rgb(255, 0, 0);\n"
"font: 36pt \"Times New Roman\";")
        self.label.setObjectName("label")
        self.frame_2 = QtWidgets.QFrame(self.page)
        self.frame_2.setGeometry(QtCore.QRect(0, 0, 121, 141))
        # self.frame_2.setStyleSheet("border-image: url(:/newPrefix/XMART-01.jpg);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.frame_3 = QtWidgets.QFrame(self.page_2)
        self.frame_3.setGeometry(QtCore.QRect(0, 0, 121, 141))
        # self.frame_3.setStyleSheet("border-image: url(:/newPrefix/XMART-01.jpg);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.frame_4 = QtWidgets.QFrame(self.page_2)
        self.frame_4.setGeometry(QtCore.QRect(200, 180, 281, 191))
        self.frame_4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-color: rgb(0, 0, 0);")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.user2 = QtWidgets.QLineEdit(self.frame_4)
        self.user2.setGeometry(QtCore.QRect(80, 20, 121, 31))
        self.user2.setStyleSheet("color: rgb(0, 0, 0);")
        self.user2.setObjectName("user2")
        self.pass2 = QtWidgets.QLineEdit(self.frame_4)
        self.pass2.setGeometry(QtCore.QRect(80, 70, 121, 31))
        self.pass2.setStyleSheet("color: rgb(0, 0, 0);")
        self.pass2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.pass2.setObjectName("pass2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_3.setGeometry(QtCore.QRect(94, 160, 91, 23))
        self.pushButton_3.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 14pt \"Times New Roman\";\n"
"background-color: rgb(255, 0, 0);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pass2_2 = QtWidgets.QLineEdit(self.frame_4)
        self.pass2_2.setGeometry(QtCore.QRect(80, 120, 121, 31))
        self.pass2_2.setStyleSheet("color: rgb(0, 0, 0);")
        self.pass2_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.pass2_2.setObjectName("pass2_2")
        self.label_2 = QtWidgets.QLabel(self.page_2)
        self.label_2.setGeometry(QtCore.QRect(250, 50, 171, 81))
        self.label_2.setStyleSheet("color: rgb(255, 0, 0);\n"
"font: 36pt \"Times New Roman\";")
        self.label_2.setObjectName("label_2")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.frame_5 = QtWidgets.QFrame(self.page_3)
        self.frame_5.setGeometry(QtCore.QRect(0, 0, 121, 141))
        # self.frame_5.setStyleSheet("border-image: url(:/newPrefix/XMART-01.jpg);")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.line = QtWidgets.QFrame(self.page_3)
        self.line.setGeometry(QtCore.QRect(110, 0, 20, 591))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.Employee = QtWidgets.QPushButton(self.page_3)
        self.Employee.setGeometry(QtCore.QRect(10, 160, 101, 31))
        self.Employee.setObjectName("Employee")
        self.Inventory = QtWidgets.QPushButton(self.page_3)
        self.Inventory.setGeometry(QtCore.QRect(10, 210, 101, 31))
        self.Inventory.setObjectName("Inventory")
        self.billing = QtWidgets.QPushButton(self.page_3)
        self.billing.setGeometry(QtCore.QRect(10, 260, 101, 31))
        self.billing.setObjectName("billing")
        self.logout = QtWidgets.QPushButton(self.page_3)
        self.logout.setGeometry(QtCore.QRect(10, 390, 101, 31))
        self.logout.setStyleSheet("font: 12 \"Times New Roman\";\n"
"color: rgb(255, 0, 0);")
        self.logout.setObjectName("logout")
        self.lineEdit = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit.setGeometry(QtCore.QRect(130, 100, 101, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_2.setGeometry(QtCore.QRect(130, 140, 101, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_3.setGeometry(QtCore.QRect(130, 180, 101, 31))
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_4.setGeometry(QtCore.QRect(130, 220, 101, 31))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.tableWidget = QtWidgets.QTableWidget(self.page_3)
        self.tableWidget.setGeometry(QtCore.QRect(130, 260, 511, 321))
        self.tableWidget.setStyleSheet("font: 12pt \"Times New Roman\";\n"
"background-color: rgb(255, 255, 255);")
        self.tableWidget.setGridStyle(QtCore.Qt.SolidLine)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(60)
        self.tableWidget.verticalHeader().setDefaultSectionSize(50)
        self.calendarWidget = QtWidgets.QCalendarWidget(self.page_3)
        self.calendarWidget.setGeometry(QtCore.QRect(410, 80, 251, 161))
        self.calendarWidget.setObjectName("calendarWidget")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_5.setGeometry(QtCore.QRect(260, 70, 101, 31))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.page_3)
        self.lineEdit_6.setGeometry(QtCore.QRect(260, 110, 101, 31))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton_4 = QtWidgets.QPushButton(self.page_3)
        self.pushButton_4.setGeometry(QtCore.QRect(260, 150, 101, 26))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.page_3)
        self.pushButton_5.setGeometry(QtCore.QRect(260, 190, 101, 26))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.page_3)
        self.pushButton_6.setGeometry(QtCore.QRect(260, 230, 101, 26))
        self.pushButton_6.setObjectName("pushButton_6")
        self.lcdNumber = QtWidgets.QLCDNumber(self.page_3)
        self.lcdNumber.setGeometry(QtCore.QRect(130, 70, 101, 23))
        self.lcdNumber.setStyleSheet("color: rgb(0, 0, 0);")
        self.lcdNumber.setFrameShape(QtWidgets.QFrame.Box)
        self.lcdNumber.setSmallDecimalPoint(False)
        self.lcdNumber.setDigitCount(8)
        self.lcdNumber.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
        self.lcdNumber.setProperty("intValue", 4)
        self.lcdNumber.setObjectName("lcdNumber")
        self.label_6 = QtWidgets.QLabel(self.page_3)
        self.label_6.setGeometry(QtCore.QRect(260, 10, 251, 41))
        self.label_6.setStyleSheet("font: 24pt \"Times New Roman\";\n"
"color: rgb(255, 0, 0);")
        self.label_6.setObjectName("label_6")
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
##        self.lineEdit_13 = QtWidgets.QLineEdit(self.page_4)
##        self.lineEdit_13.setGeometry(QtCore.QRect(500, 60, 131, 31))
##        self.lineEdit_13.setObjectName("lineEdit_13")
        self.line_3 = QtWidgets.QFrame(self.page_4)
        self.line_3.setGeometry(QtCore.QRect(110, 0, 20, 591))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.Employee_3 = QtWidgets.QPushButton(self.page_4)
        self.Employee_3.setGeometry(QtCore.QRect(10, 160, 101, 31))
        self.Employee_3.setObjectName("Employee_3")
        self.billing_3 = QtWidgets.QPushButton(self.page_4)
        self.billing_3.setGeometry(QtCore.QRect(10, 260, 101, 31))
        self.billing_3.setObjectName("billing_3")
        self.lineEdit_14 = QtWidgets.QLineEdit(self.page_4)
        self.lineEdit_14.setGeometry(QtCore.QRect(350, 60, 131, 31))
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.lineEdit_15 = QtWidgets.QLineEdit(self.page_4)
        self.lineEdit_15.setGeometry(QtCore.QRect(200, 60, 131, 31))
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.Inventory_3 = QtWidgets.QPushButton(self.page_4)
        self.Inventory_3.setGeometry(QtCore.QRect(10, 210, 101, 31))
        self.Inventory_3.setObjectName("Inventory_3")
        self.frame_11 = QtWidgets.QFrame(self.page_4)
        self.frame_11.setGeometry(QtCore.QRect(0, 0, 121, 141))
        # self.frame_11.setStyleSheet("border-image: url(:/newPrefix/XMART-01.jpg);")
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.pushButton_13 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_13.setGeometry(QtCore.QRect(240, 150, 111, 31))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QtWidgets.QPushButton(self.page_4)
        self.pushButton_14.setGeometry(QtCore.QRect(410, 150, 111, 31))
        self.pushButton_14.setObjectName("pushButton_14")
        self.tableWidget_3 = QtWidgets.QTableWidget(self.page_4)
        self.tableWidget_3.setGeometry(QtCore.QRect(190, 210, 411, 371))
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(4)
        self.tableWidget_3.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_3.setHorizontalHeaderItem(3, item)
        self.radioButton = QtWidgets.QRadioButton(self.page_4)
        self.radioButton.setGeometry(QtCore.QRect(220, 110, 101, 31))
        self.radioButton.setStyleSheet("font: 11pt \"Times New Roman\";")
        self.radioButton.setObjectName("radioButton")
##        self.radioButton_2 = QtWidgets.QRadioButton(self.page_4)
##        self.radioButton_2.setGeometry(QtCore.QRect(350, 110, 121, 31))
##        self.radioButton_2.setStyleSheet("font: 14pt \"Times New Roman\";")
##        self.radioButton_2.setObjectName("radioButton_2")
##        self.radioButton_3 = QtWidgets.QRadioButton(self.page_4)
##        self.radioButton_3.setGeometry(QtCore.QRect(500, 110, 101, 31))
##        self.radioButton_3.setStyleSheet("font: 14pt \"Times New Roman\";")
##        self.radioButton_3.setObjectName("radioButton_3")
        self.label_5 = QtWidgets.QLabel(self.page_4)
        self.label_5.setGeometry(QtCore.QRect(250, 10, 291, 31))
        self.label_5.setStyleSheet("font: 24pt \"Times New Roman\";\n"
"color: rgb(255, 0, 0);")
        self.label_5.setObjectName("label_5")
        self.stackedWidget.addWidget(self.page_4)
        self.page_8 = QtWidgets.QWidget()
        self.page_8.setObjectName("page_8")
        self.lineEdit_16 = QtWidgets.QLineEdit(self.page_8)
        self.lineEdit_16.setGeometry(QtCore.QRect(520, 90, 101, 31))
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.line_4 = QtWidgets.QFrame(self.page_8)
        self.line_4.setGeometry(QtCore.QRect(110, 0, 20, 591))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.Employee_4 = QtWidgets.QPushButton(self.page_8)
        self.Employee_4.setGeometry(QtCore.QRect(10, 160, 101, 31))
        self.Employee_4.setObjectName("Employee_4")
        self.billing_4 = QtWidgets.QPushButton(self.page_8)
        self.billing_4.setGeometry(QtCore.QRect(10, 260, 101, 31))
        self.billing_4.setObjectName("billing_4")
        self.lineEdit_17 = QtWidgets.QLineEdit(self.page_8)
        self.lineEdit_17.setGeometry(QtCore.QRect(280, 90, 101, 31))
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.tableWidget_4 = QtWidgets.QTableWidget(self.page_8)
        self.tableWidget_4.setGeometry(QtCore.QRect(130, 260, 511, 321))
        self.tableWidget_4.setStyleSheet("font: 12pt \"Times New Roman\";\n"
"background-color: rgb(255, 255, 255);")
        self.tableWidget_4.setGridStyle(QtCore.Qt.SolidLine)
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(4)
        self.tableWidget_4.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_4.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_4.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_4.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_4.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_4.setHorizontalHeaderItem(4, item)
        self.tableWidget_4.horizontalHeader().setMinimumSectionSize(60)
        self.tableWidget_4.verticalHeader().setDefaultSectionSize(50)
        self.lineEdit_18 = QtWidgets.QLineEdit(self.page_8)
        self.lineEdit_18.setGeometry(QtCore.QRect(160, 90, 101, 31))
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.Inventory_4 = QtWidgets.QPushButton(self.page_8)
        self.Inventory_4.setGeometry(QtCore.QRect(10, 210, 101, 31))
        self.Inventory_4.setObjectName("Inventory_4")
        self.lineEdit_19 = QtWidgets.QLineEdit(self.page_8)
        self.lineEdit_19.setGeometry(QtCore.QRect(400, 90, 101, 31))
        self.lineEdit_19.setText("")
        self.lineEdit_19.setObjectName("lineEdit_19")
        self.frame_12 = QtWidgets.QFrame(self.page_8)
        self.frame_12.setGeometry(QtCore.QRect(0, 0, 121, 141))
        # self.frame_12.setStyleSheet("border-image: url(:/newPrefix/XMART-01.jpg);")
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.pushButton_15 = QtWidgets.QPushButton(self.page_8)
        self.pushButton_15.setGeometry(QtCore.QRect(180, 160, 101, 41))
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_16 = QtWidgets.QPushButton(self.page_8)
        self.pushButton_16.setGeometry(QtCore.QRect(320, 160, 101, 41))
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_17 = QtWidgets.QPushButton(self.page_8)
        self.pushButton_17.setGeometry(QtCore.QRect(460, 160, 101, 41))
        self.pushButton_17.setObjectName("pushButton_17")
        self.label_7 = QtWidgets.QLabel(self.page_8)
        self.label_7.setGeometry(QtCore.QRect(250, 10, 301, 31))
        self.label_7.setStyleSheet("font: 24pt \"Times New Roman\";\n"
"color: rgb(255, 0, 0);")
        self.label_7.setObjectName("label_7")
        self.stackedWidget.addWidget(self.page_8)
        self.label_3 = QtWidgets.QLabel(self.page_8)
        self.label_3.setGeometry(QtCore.QRect(0, 550, 111, 41))
        self.label_3.setStyleSheet("color: rgb(0, 0, 255);\n"
"font: 10.87pt \"Times New Roman\";")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.page_4)
        self.label_4.setGeometry(QtCore.QRect(0, 550, 111, 41))
        self.label_4.setStyleSheet("color: rgb(0, 0, 255);\n"
"font: 10.87pt \"Times New Roman\";")
        self.label_4.setObjectName("label_4")
        self.label_8 = QtWidgets.QLabel(self.page_3)
        self.label_8.setGeometry(QtCore.QRect(0, 550, 111, 41))
        self.label_8.setStyleSheet("color: rgb(0, 0, 255);\n"
"font: 10.87pt \"Times New Roman\";")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.page_2)
        self.label_9.setGeometry(QtCore.QRect(0, 550, 111, 41))
        self.label_9.setStyleSheet("color: rgb(0, 0, 255);\n"
"font: 10.87pt \"Times New Roman\";")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.page)
        self.label_10.setGeometry(QtCore.QRect(0, 550, 111, 41))
        self.label_10.setStyleSheet("color: rgb(0, 0, 255);\n"
"font: 10.87pt \"Times New Roman\";")
        self.label_10.setObjectName("label_10")


        
        self.retranslateUi(mart)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(mart)

    def retranslateUi(self, mart):
        _translate = QtCore.QCoreApplication.translate
        mart.setWindowTitle(_translate("mart", "AHS"))
        self.user1.setPlaceholderText(_translate("mart", "Username"))
        self.pass1.setPlaceholderText(_translate("mart", "Password"))
        self.pushButton.setText(_translate("mart", "LOGIN"))
        self.pushButton.setShortcut(_translate("mart", "Return"))
        self.pushButton_2.setText(_translate("mart", "SIGN UP"))
        self.label.setText(_translate("mart", "AHS"))
        self.user2.setPlaceholderText(_translate("mart", "Username"))
        self.pass2.setPlaceholderText(_translate("mart", "Password"))
        self.pushButton_3.setText(_translate("mart", "SIGN UP"))
        self.pass2_2.setPlaceholderText(_translate("mart", "Confirm Password"))
        self.label_2.setText(_translate("mart", "AHS"))
        self.Employee.setText(_translate("mart", "SUPPLIER"))
        self.Inventory.setText(_translate("mart", "INVENTORY"))
        self.billing.setText(_translate("mart", "BILLING"))
        self.lineEdit.setPlaceholderText(_translate("mart", "PR-ID"))
        self.lineEdit_2.setPlaceholderText(_translate("mart", "PR-NAME"))
        self.lineEdit_3.setPlaceholderText(_translate("mart", "Unit-Cost"))
        self.lineEdit_4.setPlaceholderText(_translate("mart", "Quantity"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("mart", "PR-ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("mart", "PR_NAME"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("mart", "UNIT-COST"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("mart", "QUANTITY"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("mart", "TOTAL"))
        self.lineEdit_5.setText(_translate("mart", "Customer"))
        self.lineEdit_5.setPlaceholderText(_translate("mart", "Customer"))
        self.lineEdit_6.setPlaceholderText(_translate("mart", "Sub-Total"))
        self.pushButton_4.setText(_translate("mart", "ADD PRDOUCT"))
        self.pushButton_4.setShortcut(_translate("mart", "Enter"))
        self.pushButton_3.setShortcut(_translate("mart", "Return"))
        self.pushButton_5.setText(_translate("mart", "ADD MORE"))
        self.pushButton_5.setShortcut(_translate("mart", "Ctrl+S"))
        self.pushButton_6.setText(_translate("mart", "PRINT"))
        self.pushButton_6.setShortcut(_translate("mart", "Ctrl+P"))
        self.label_6.setText(_translate("mart", "AHS BILLING"))
##        self.lineEdit_13.setPlaceholderText(_translate("mart", "Salary"))
        self.Employee_3.setText(_translate("mart", "SUPPLIER"))
        self.billing_3.setText(_translate("mart", "BILLING"))
        self.lineEdit_14.setPlaceholderText(_translate("mart", "NAME"))
        self.lineEdit_15.setPlaceholderText(_translate("mart", "ID"))
        self.Inventory_3.setText(_translate("mart", "INVENTORY"))
        self.pushButton_13.setText(_translate("mart", "ADD SUPPLIER"))
        self.pushButton_13.setShortcut(_translate("mart", "Ctrl+S"))
        self.pushButton_14.setText(_translate("mart", "DELETE"))
        self.pushButton_14.setShortcut(_translate("mart", "Ctrl+Del"))
        item = self.tableWidget_3.horizontalHeaderItem(0)
        item.setText(_translate("mart", "ID"))
        item = self.tableWidget_3.horizontalHeaderItem(1)
        item.setText(_translate("mart", "NAME"))
        item = self.tableWidget_3.horizontalHeaderItem(2)
        item.setText(_translate("mart", "DESIGNATION"))
##        item = self.tableWidget_3.horizontalHeaderItem(3)
##        item.setText(_translate("mart", "SALARY"))
        self.radioButton.setText(_translate("mart", "SUPPLIER"))
##        self.radioButton_2.setText(_translate("mart", "SALESMAN"))
##        self.radioButton_3.setText(_translate("mart", "GUARD"))
        self.label_5.setText(_translate("mart", "AHS SUPPLIER"))
        self.lineEdit_16.setPlaceholderText(_translate("mart", "Quantity"))
        self.Employee_4.setText(_translate("mart", "SUPPLIER"))
        self.billing_4.setText(_translate("mart", "BILLING"))
        self.logout.setText(_translate("mart", "LOGOUT"))
        self.lineEdit_17.setPlaceholderText(_translate("mart", "PR-NAME"))
        item = self.tableWidget_4.horizontalHeaderItem(0)
        item.setText(_translate("mart", "PR-ID"))
        item = self.tableWidget_4.horizontalHeaderItem(1)
        item.setText(_translate("mart", "PR_NAME"))
        item = self.tableWidget_4.horizontalHeaderItem(2)
        item.setText(_translate("mart", "UNIT-COST"))
        item = self.tableWidget_4.horizontalHeaderItem(3)
        item.setText(_translate("mart", "QUANTITY"))
        self.lineEdit_18.setPlaceholderText(_translate("mart", "PR-ID"))
        self.Inventory_4.setText(_translate("mart", "INVENTORY"))
        self.lineEdit_19.setPlaceholderText(_translate("mart", "Unit-Cost"))
        self.pushButton_15.setText(_translate("mart", "ADD PRDOUCT"))
        self.pushButton_15.setShortcut(_translate("mart", "Ctrl+S"))
        self.pushButton_16.setText(_translate("mart", "SEARCH"))
        self.pushButton_16.setShortcut(_translate("mart", "Ctrl+Del"))
        self.pushButton_17.setText(_translate("mart", "UPDATE"))
        self.pushButton_17.setShortcut(_translate("mart", "Ctrl+D"))
        self.label_7.setText(_translate("mart", "AHS INVENTORY"))
        # self.label_4.setText(_translate("mart", "MSY SOFTWARES"))
        # self.label_3.setText(_translate("mart", "MSY SOFTWARES"))
        # self.label_8.setText(_translate("mart", "MSY SOFTWARES"))
        # self.label_9.setText(_translate("mart", "MSY SOFTWARES"))
        # self.label_10.setText(_translate("mart", "MSY SOFTWARES"))
        ###   BUTTON CONNECTED    ####
        self.Employee.clicked.connect(self.change_employee_page)
        self.Inventory.clicked.connect(self.change_inventory_page)
        self.Inventory_3.clicked.connect(self.change_inventory_page)
        self.billing_3.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(2))
        self.billing_4.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(2))
        self.Employee_4.clicked.connect(self.change_employee_page)
        self.pushButton_2.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(1))
        self.logout.clicked.connect(lambda:self.stackedWidget.setCurrentIndex(0))
        self.pushButton_3.clicked.connect(self.signup)
        self.pushButton.clicked.connect(self.login)
        self.pushButton.clicked.connect(self.pdf)
        ############# BILLING     ##############
        self.pushButton_4.clicked.connect(self.addpr)
        self.pushButton_5.clicked.connect(self.addmore)
        self.pushButton_5.clicked.connect(self.loaddata)
        self.pushButton_6.clicked.connect(self.sales)
        self.pushButton_6.clicked.connect(self.saving)
        self.pushButton_6.clicked.connect(self.pdfsave)
        self.pushButton_6.clicked.connect(self.pdf)
        
        ###   EMPLOYEEE
        
        self.Employee.clicked.connect(self.loademp)
        self.pushButton_13.clicked.connect(self.addemp)
        self.pushButton_13.clicked.connect(self.loademp)
        self.pushButton_14.clicked.connect(self.delemp)
        self.pushButton_14.clicked.connect(self.loademp)
#######   ADD    LOAD    DELETE  UPDATE INVENTORY    ##########
        self.pushButton_15.clicked.connect(self.addinv)
        self.pushButton_15.clicked.connect(self.loadinv)
        self.Inventory.clicked.connect(self.loadinv)
        self.pushButton_16.clicked.connect(self.delinv)
        self.pushButton_16.clicked.connect(self.loadinv)
        self.pushButton_17.clicked.connect(self.upinv)
        self.pushButton_17.clicked.connect(self.loadinv)
#################################################################
    def change_employee_page(self):
        try:
            global user_role
            print(user_role)
            if user_role == 'admin':
                self.stackedWidget.setCurrentIndex(3)
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("CANT ACCESS THIS SCREEN!, CONTACT ADMIN OR LOGIN AS ADMIN")
                msg.setWindowTitle("AHS")
                msg.exec_()
        except Exception as error:
            print(error)
    def change_inventory_page(self):
        try:
            global user_role
            print(user_role)
            if user_role == 'admin':
                self.stackedWidget.setCurrentIndex(4)
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("CANT ACCESS THIS SCREEN!, CONTACT ADMIN OR LOGIN AS ADMIN")
                msg.setWindowTitle("AHS")
                msg.exec_()
        except Exception as error:
            print(error)

        
    def signup(self):
        u2=self.user2.text()
        pass2=self.pass2.text()
        pass3=self.pass2_2.text()
        role = 'cashier'
        try:
            if pass2 != pass3:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("BOTH PASSWORD DOESNOT MATCH")
                msg.setWindowTitle("AHS")
                msg.exec_()
                self.pass2_2.setText("")
            elif (u2 and pass2 and pass3 == ""):
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("SOME FIELD IS MISSING")
                msg.setWindowTitle("AHS")
                msg.exec_()
            else:
                conn = sqlite3.connect('xmart.db')
                cursor = conn.cursor()
                sql = ('''INSERT INTO LOGIN(username,password,role) VALUES(?,?,?);''')
                cursor.execute(sql,(u2,pass2,str(role)))
                conn.commit()
                conn.close()
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("User Added Successfully")
                msg.setWindowTitle("AHS")
                msg.exec_()
                self.user2.setText("")
                self.pass2.setText("")
                self.pass2_2.setText("")
                self.stackedWidget.setCurrentIndex(0)
        except Exception as error:
            print(error)
    def login(self):
        u1=self.user1.text()
        pass1=self.pass1.text()
        try:
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql = 'SELECT * FROM LOGIN WHERE username = ? and password = ?;'
            cursor.execute(sql,(u1,pass1))
            row=cursor.fetchone()
            if row==None:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("USERNAME OR PASSWORD IS INCORRECT")
                msg.setWindowTitle("AHS")
                msg.exec_()
                self.user1.setText("")
                self.pass1.setText("")
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("SUCCESSFULLY LOGGED IN")
                msg.setWindowTitle("AHS")
                msg.exec_()
                self.user1.setText("")
                self.pass1.setText("")
                global user_role
                user_role = row[2]
                self.stackedWidget.setCurrentIndex(2)
                conn = sqlite3.connect('xmart.db')
                cursor = conn.cursor()
                sql = ('SELECT BILL_NO FROM SALES')
                cursor.execute(sql,)
                num=cursor.fetchall()
                lst = []
                for i in num:
                    lst.append(int(i[0]))
                # print(sorted(lst))
                num = sorted(lst)[-1]
#                 num=num[0]
                num=int(num)
                num=num+1
# ##                print(num)
                self.lcdNumber.display(num)
                
########################
            conn.commit()
            conn.close()
        except Exception as error:
            print(error)
    def addinv(self):
        Pr_Id=self.lineEdit_18.text()
        Pr_Name=self.lineEdit_17.text()
        Unit_Cost=self.lineEdit_19.text()
        Quantity=self.lineEdit_16.text()
        try:
            if Pr_Id and Pr_Name and Unit_Cost and Quantity != "":
                conn = sqlite3.connect('xmart.db')
                cursor = conn.cursor()
                sql = ('''INSERT INTO INVENTORY(PR_ID,PR_NAME,UNIT_COST,QUANTITY) VALUES(?,?,?,?);''')
                cursor.execute(sql,(Pr_Id,Pr_Name,Unit_Cost,Quantity))
                conn.commit()
                conn.close()
                self.lineEdit_18.setText("")
                self.lineEdit_17.setText("")
                self.lineEdit_19.setText("")
                self.lineEdit_16.setText("")
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("ADDED")
                msg.setWindowTitle("AHS")
                msg.exec_()
                self.lineEdit_18.setFocus()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("ERROR")
                msg.setWindowTitle("AHS")
                msg.exec_()
        except Exception as error:
            print(error)
        
    def loadinv(self):
        try:
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql=("SELECT * FROM INVENTORY")
            result=cursor.execute(sql)
            self.tableWidget_4.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget_4.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_4.setItem(row_number,column_number, QtWidgets.QTableWidgetItem(str(data)))
            conn.commit()
            conn.close()
        except Exception as error:
            print(error)

    def delinv(self):
        Pr_Id=self.lineEdit_18.text()
        try:
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql = ('SELECT QUANTITY FROM INVENTORY WHERE PR_ID = ?')
            cursor.execute(sql,(Pr_Id,))
            row = cursor.fetchone()
            conn.commit()
            conn.close()
            self.lineEdit_16.setText(str(row[0]))
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("FOUND")
            msg.setWindowTitle("AHS")
            msg.exec_()
        except Exception as error:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("NOT FOUND")
            msg.setWindowTitle("AHS")
            msg.exec_()
    def upinv(self):
        Id=self.lineEdit_18.text()
        unit=self.lineEdit_19.text()
        try:
            if Id and unit != "":
                conn = sqlite3.connect('xmart.db')
                cursor = conn.cursor()
                sql = ("UPDATE INVENTORY set UNIT_COST = ? where PR_ID = ?")
                cursor.execute(sql,(unit,Id))
                conn.commit()
                conn.close()
                self.lineEdit_18.setText("")
                self.lineEdit_19.setText("")
                self.lineEdit_18.setFocus()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("ERROR")
                msg.setWindowTitle("AHS")
                msg.exec_()
        except Exception as error:
            print(error)
######     EMPLOYEEE ADDING DELETE    #############
    def addemp(self):
        eid=self.lineEdit_15.text()
        ena=self.lineEdit_14.text()
        a = 'SUPPLIER'
        try:
            if eid and ena != "":
                conn = sqlite3.connect('xmart.db')
                cursor = conn.cursor()
                sql = ("INSERT INTO EMPLOYEE(ID,NAME,DESIGNATION) VALUES(?,?,?);")
                cursor.execute(sql,(eid,ena,a))
                conn.commit()
                conn.close()
                self.lineEdit_15.setText("")
                self.lineEdit_14.setText("")
                
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("ERROR")
                msg.setWindowTitle("AHS")
                msg.exec_()
        except Exception as error:
            print(error)

    def loademp(self):
        try:
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql=("SELECT * FROM EMPLOYEE")
            result=cursor.execute(sql)
            self.tableWidget_3.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget_3.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_3.setItem(row_number,column_number, QtWidgets.QTableWidgetItem(str(data)))
            conn.commit()
            conn.close()
        except Exception as error:
            print(error)

    def delemp(self):
        eid=self.lineEdit_15.text()
        try:
            if eid != "":
                conn = sqlite3.connect('xmart.db')
                cursor = conn.cursor()
                sql = ('DELETE FROM EMPLOYEE WHERE ID = ?')
                cursor.execute(sql,(eid,))
                conn.commit()
                conn.close()
                self.lineEdit_15.setText("")
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("DELETED")
                msg.setWindowTitle("AHS")
                msg.exec_()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("NO SUCH ID")
                msg.setWindowTitle("AHS")
                msg.exec_()
        except Exception as error:
            print(error)
    
    #####    BILLINGS   ######
    def addpr(self):
        pr_id=self.lineEdit.text()
        try:
            a=[]
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql = ('SELECT * FROM INVENTORY WHERE PR_ID = ?')
            cursor.execute(sql,(pr_id,))
            b=cursor.fetchone()
            for b in b:
                a.append(b)
            self.lineEdit_2.setText(a[1])
            self.lineEdit_3.setText(a[2])
            self.lineEdit_4.setFocus()
            conn.commit()
            conn.close()
        except Exception as error:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("NO SUCH PR_ID")
            msg.setWindowTitle("AHS")
            msg.exec_()
    def addmore(self):
        Pr_Id=self.lineEdit.text()
        Pr_Name=self.lineEdit_2.text()
        Unit_Cost=self.lineEdit_3.text()
        Quantity=self.lineEdit_4.text()
        try:
            if Pr_Id and Pr_Name and Unit_Cost and Quantity != "":
                global B
                global d
                d=d+6
                A=int(Unit_Cost)*int(Quantity)
                B=B+A
                A=str(A)
                conn = sqlite3.connect('xmart.db')
                cursor = conn.cursor()
                sql = ('''INSERT INTO DATA(PR_ID,PR_NAME,UNIT_COST,QUANTITY,TOTAL) VALUES(?,?,?,?,?);''')
                cursor.execute(sql,(Pr_Id,Pr_Name,Unit_Cost,Quantity,A))
                conn.commit()
                conn.close()
                c.drawString(25,d,Pr_Id)
                c.drawString(75,d,Pr_Name)
                c.drawString(125,d,Unit_Cost)
                c.drawString(148,d,Quantity)
                c.drawString(173,d,A)
                self.lineEdit_6.setText(str(B))
                self.lineEdit.setText("")
                self.lineEdit_2.setText("")
                self.lineEdit_3.setText("")
                self.lineEdit_4.setText("")
                self.lineEdit.setFocus()
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("WRONG")
                msg.setWindowTitle("AHS")
                msg.exec_()
        except Exception as error:
            print("addmore",error)
    def sales(self):
        try:
            global B
            global c
            a=self.lcdNumber.intValue()
            b=a+1
            self.lcdNumber.display(b)
            billno=a
            sales=str(B)
            name=self.lineEdit_5.text()
            x = datetime.datetime.now()
            date=x.day,x.strftime("%a"),x.year
            date=str(date)
            c.drawString(85,50,str(a))
            c.drawString(85,70,name)
            c.drawString(85,60,date)
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql = ('INSERT INTO SALES(BILL_NO,NAME,SALES,DATE) VALUES(?,?,?,?);')
            cursor.execute(sql,(billno,name,sales,date))
            conn.commit()
            conn.close()
        except Exception as error:
            print("sales",error)
    def saving(self):
        try:
            global B
            global c
##            print(B)
##            print("1")
            c.drawString(173,217,str(B))
##            print(self.lcdNumber.intValue())
            B=int(B)
            B=0
            self.lineEdit_6.setText("")
            self.lineEdit_5.setText("Customer")
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setText("THANKYOU")
            msg.setWindowTitle("AHS")
            msg.exec_()
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql = ('DELETE FROM DATA ')
            cursor.execute(sql,)
            conn.commit()
            conn.close()
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql=("SELECT * FROM DATA")
            result=cursor.execute(sql)
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number,column_number, QtWidgets.QTableWidgetItem(str(data)))
            conn.commit()
            conn.close()
        except Exception as error:
            print("saving",error)
    def loaddata(self):
        try:
            conn = sqlite3.connect('xmart.db')
            cursor = conn.cursor()
            sql=("SELECT * FROM DATA")
            result=cursor.execute(sql)
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number,column_number, QtWidgets.QTableWidgetItem(str(data)))
            conn.commit()
            conn.close()
        except Exception as error:
            print(error)
    def pdf(self):
        try:
            global c
            c = canvas.Canvas("AHS.pdf",pagesize=(200,250),bottomup=0)
            c.translate(10,40)
            c.scale(1,-1)
#            c.drawImage("AHS-01.png",0,0,width=50,height=30)


            c.scale(1,-1)
            c.translate(-10,-40)
            c.setFont("Helvetica-Bold",10)

            c.drawCentredString(100,20,"ABDULLAH HARDWARE STORE")
            c.line(70,22,180,22)

            c.setFont("Helvetica-Bold",5)
            c.drawCentredString(100,30,"Azeempura Road, Green Town Shah Faisal Colony , Karachi.")
            c.drawCentredString(100,35,"KARACHI-PAKISTAN")
            c.line(5,45,195,45)

            c.setFont("Courier-Bold",8)
            c.setFont("Times-Bold",5)
            c.drawRightString(70,50,"INVOICE No. :")
            c.drawRightString(70,60,"DATE :")
            c.drawRightString(70,70,"CUSTOMER NAME :")
            c.line(15,80,185,80)
            c.line(15,92,185,92)
            c.drawCentredString(25,89,"PR-ID.")
            c.drawCentredString(75,89,"PR-NAME")
            c.drawCentredString(125,89,"RATE")
            c.drawCentredString(148,89,"QTY")
            c.drawCentredString(173,89,"TOTAL")
            c.drawCentredString(25,217,"TOTAL")
            c.line(15,220,185,220)
            c.line(100,220,100,238)
            c.drawRightString(180,235,"Authorised Signatory")
        except Exception as error:
            print("pdf making",error)
    def pdfsave(self):
        try:
            global d
            d=94
            global c
            c.showPage()
            c.save()
            webbrowser.open("AHS.pdf")
        except Exception as error:
            print("pdf save",error)




    
import xmart_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mart = QtWidgets.QWidget()
    ui = Ui_mart()
    ui.setupUi(mart)
    mart.show()
    sys.exit(app.exec_())
